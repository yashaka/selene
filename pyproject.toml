[tool.poetry]
name = "selene"
version = "2.0.0rc9"
description = "User-oriented browser tests in Python (Selenide port)"
authors = ["Iakiv Kramarenko <yashaka@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = [
    "testing",
    "selenium",
    "selenide",
    "browser",
    "pageobject",
    "widget",
    "wrapper"
]
homepage = "https://yashaka.github.io/selene/"
repository = "https://github.com/yashaka/selene/"
documentation = "https://yashaka.github.io/selene/"
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Testing",
]
packages = [
    {include = "selene"},
    {include = "selene/api"},
    {include = "selene/common"},
    {include = "selene/core"},
    {include = "selene/support"},
    {include = "selene/support/shared"},
    {include = "selene/support/conditions"},
    {include = "selene/py.typed"}
]

[tool.poetry.urls]
Changelog = "https://github.com/yashaka/selene/releases"

[tool.poetry.dependencies]
python = "^3.8"
selenium = ">=4.12.0"
future = "*"
typing-extensions = ">=4.9.0"

[tool.poetry.dev-dependencies]
black = "^24.2.0"
pycodestyle = "*"
pylint = "2.13.9"
pytest = "*"
pytest-cov = "*"
mypy = "*"
pydantic = "^1.10.13"
python-dotenv = "0.21.1"
Appium-Python-Client = "^2.9.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.1.6"
mkdocstrings = {extras = ["python"], version = "^0.21.2"}
mkdocs-redirects = "^1.2.0"
mkdocs-git-revision-date-localized-plugin = "^1.2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
disable_error_code = 'annotation-unchecked'
allow_redefinition = true  # TODO: how to properly make it work o_O ?
color_output=1
exclude = [
    '^test_.+\.py$',
    '^.+_test\.py$',
]


[tool.black]
line-length = 88
target-version = ['py38']
skip-string-normalization = 1

[tool.pylint]
    [tool.pylint.master]
    ignore=['CVS']
    jobs=1
    persistent=['yes']
    unsafe-load-any-extension=['no']
    suggestion-mode=['yes']
    fail-under=['10.0']

    [tool.pylint.'MESSAGES CONTROL']
    enable=['c-extension-no-member']
    disable=['''no-else-return,
        import-outside-toplevel,
        too-many-locals,
        too-many-lines,
        too-many-branches,
        invalid-name,
        not-callable,
        unused-argument,
        protected-access,
        pointless-string-statement,
        too-few-public-methods,
        too-many-public-methods,
        redefined-outer-name,
        missing-class-docstring,
        missing-module-docstring,
        missing-function-docstring,
        no-else-raise,
        print-statement,
        parameter-unpacking,
        unpacking-in-except,
        old-raise-syntax,
        backtick,
        long-suffix,
        old-ne-operator,
        old-octal-literal,
        import-star-module-level,
        non-ascii-bytes-literal,
        raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead,
        apply-builtin,
        basestring-builtin,
        buffer-builtin,
        cmp-builtin,
        coerce-builtin,
        execfile-builtin,
        file-builtin,
        long-builtin,
        raw_input-builtin,
        reduce-builtin,
        standarderror-builtin,
        unicode-builtin,
        xrange-builtin,
        coerce-method,
        delslice-method,
        getslice-method,
        setslice-method,
        no-absolute-import,
        old-division,
        dict-iter-method,
        dict-view-method,
        next-method-called,
        metaclass-assignment,
        indexing-exception,
        raising-string,
        reload-builtin,
        oct-method,
        hex-method,
        nonzero-method,
        cmp-method,
        input-builtin,
        round-builtin,
        intern-builtin,
        unichr-builtin,
        map-builtin-not-iterating,
        zip-builtin-not-iterating,
        range-builtin-not-iterating,
        filter-builtin-not-iterating,
        using-cmp-argument,
        eq-without-hash,
        div-method,
        idiv-method,
        rdiv-method,
        exception-message-attribute,
        invalid-str-codec,
        sys-max-int,
        bad-python3-import,
        deprecated-string-function,
        deprecated-str-translate-call,
        deprecated-itertools-function,
        deprecated-types-field,
        next-method-defined,
        dict-items-not-iterating,
        dict-keys-not-iterating,
        dict-values-not-iterating,
        deprecated-operator-function,
        deprecated-urllib-function,
        xreadlines-attribute,
        deprecated-sys-function,
        exception-escape,
        comprehension-escape
        unused-private-member,
        typevar-name-incorrect-variance''']
    [tool.pylint.'REPORTS']
    evaluation=['10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)']
    output-format=['colorized']
    reports=['yes']
    score=['yes']

    [tool.pylintt.'REFACTORING']
    max-nested-blocks=5
    never-returning-functions=['sys.exit']

    [tool.pylint.'LOGGING']
    logging-format-style=['old']
    logging-modules=['logging']

        [tool.pylint.'SPELLING']
    max-spelling-suggestions=4
    spelling-store-unknown-words=['no']

        [tool.pylint.'MISCELLANEOUS']
    notes=['FIXME,XXX']

        [tool.pylint.'TYPECHECK']
    contextmanager-decorators=['contextlib.contextmanager']
    ignore-mixin-members=['yes']
    ignore-none=['yes']
    ignore-on-opaque-inference=['yes']
    ignored-classes=['optparse.Values,thread._local,_thread._local']
    missing-member-hint=['yes']
    missing-member-hint-distance=1
    missing-member-max-choices=1

        [tool.pylint.'VARIABLES']
    allow-global-unused-variables=['yes']
    callbacks=['cb_,_cb']
    dummy-variables-rgx=['_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_']
    ignored-argument-names=['_.*|^ignored_|^unused_']
    init-import=['no']
    redefining-builtins-modules=['six.moves,past.builtins,future.builtins,builtins,io']

        [tool.pylint.'FORMAT']
    ignore-long-lines=['^\s*(# )?<?https?://\S+>?$']
    indent-after-paren=4
    indent-string='    '
    max-line-length=88
    max-module-lines=1000
    single-line-class-stmt=['no']
    single-line-if-stmt=['no']

        [tool.pylint.'SIMILARITIES']
    ignore-comments=['yes']
    ignore-docstrings=['yes']
    ignore-imports=['no']
    min-similarity-lines=4

        [tool.pylint.'BASIC']
    argument-naming-style=['snake_case']
    attr-naming-style=['snake_case']
    bad-names=['foo,bar,baz,toto,tutu,tata']
    class-attribute-naming-style=['any']
    class-naming-style=['PascalCase']
    const-naming-style=['UPPER_CASE']
    docstring-min-length=-1
    function-naming-style=['snake_case']
    good-names=['i,j,k,ex,Run,_']
    include-naming-hint=['no']
    inlinevar-naming-style=['any']
    method-naming-style=['snake_case']
    module-naming-style=['snake_case']
    no-docstring-rgx=['^_']
    property-classes=['abc.abstractproperty']
    variable-naming-style=['snake_case']

        [tool.pylint.'STRING']
    check-quote-consistency=['no']
    check-str-concat-over-line-jumps=['no']

        [tool.pylint.'IMPORTS']
    allow-wildcard-with-all=['no']
    analyse-fallback-blocks=['no']
    deprecated-modules=['optparse,tkinter.tix']
    known-third-party=['enchant']

        [tool.pylint.'CLASSES']
    defining-attr-methods=['__init__,__new__,setUp,__post_init__']
    valid-classmethod-first-arg=['cls']
    valid-metaclass-classmethod-first-arg=['cls']

        [tool.pylint.'DESIGN']
    max-args=5
    max-attributes=7
    max-bool-expr=5
    max-branches=12
    max-locals=15
    max-parents=7
    max-public-methods=20
    max-returns=6
    max-statements=80
    min-public-methods=2

        [tool.pylint.'EXCEPTIONS']
    overgeneral-exceptions=['BaseException,Exception']
